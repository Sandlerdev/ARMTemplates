{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1318.3566",
      "templateHash": "6743662663372901199"
    }
  },
  "parameters": {
    "ResourcePrefix": {
      "type": "string",
      "metadata": {
        "description": "This prefix will be applied to new resource names."
      },
      "maxLength": 3,
      "minLength": 3
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "By default the region of the resource group will be used for the location of created resources."
      }
    },
    "IoTHubUnits": {
      "type": "int",
      "defaultValue": 1
    },
    "IoTHubSKU": {
      "type": "string",
      "defaultValue": "S1",
      "metadata": {
        "description": "Select the SKU assoicateed with the IoT Hub to be created."
      },
      "allowedValues": [
        "B1",
        "B2",
        "B3",
        "F1",
        "S1",
        "S2",
        "S3"
      ]
    },
    "DataSource": {
      "type": "string",
      "defaultValue": "FTEG",
      "metadata": {
        "description": "Select the data source for data being sent to IoT Hub and TSI.  This will dictate the configuration of the Time Series ID property that is configured at creation time."
      },
      "allowedValues": [
        "ITD",
        "OPCUA",
        "FTEG"
      ]
    },
    "WarmStorageDuration": {
      "type": "int",
      "defaultValue": 7,
      "metadata": {
        "description": "Select the number of days to hold TSI data in warm storage.  Valid values between 0 and 30."
      },
      "maxValue": 30,
      "minValue": 0
    }
  },
  "variables": {
    "eventHubName": "telemetrydata",
    "eventSourceName": "[format('{0}/{1}EventSource', format('{0}TSI', parameters('ResourcePrefix')), parameters('ResourcePrefix'))]",
    "IoTHubName": "[format('{0}IoTHub', parameters('ResourcePrefix'))]",
    "TSIConsumerGroupName": "tsieventhub",
    "timeSeriesIdPropertiesKey1": "iothub-connection0device-id",
    "timeSeriesIdPropertiesKey2": "gatewayData.model_id",
    "eventHubSKUName": "Standard",
    "eventHubSKUTier": "Standard",
    "eventHubSKUCapactity": 1,
    "eventHubNSName": "[format('{0}EventTHub', parameters('ResourcePrefix'))]",
    "eventHubIOTName": "[format('{0}/iothubdata', variables('eventHubNSName'))]",
    "eventHubTelemName": "[format('{0}/telemetrydata', variables('eventHubNSName'))]",
    "serverFarmName": "[format('{0}ServerFarm', parameters('ResourcePrefix'))]",
    "dockerRegistryResource_id": "/subscriptions/4753dce4-4462-4424-9529-c4653adadf81/resourceGroups/EIDev-Artifacts/providers/Microsoft.ContainerRegistry/registries/EIDevContainers",
    "dockerRegistryServerURL": "https://eidevcontainers.azurecr.io",
    "dockerRegistryServerUserName": "EIDevContainers",
    "dockerRegistryServerPassword": "NCYVeH28bRqRIbzrQp4bmAuejpRy38F/"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id))]",
      "location": "[parameters('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "accessTier": "Hot",
        "supportsHttpsTrafficOnly": true
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id)), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id)))]"
      ]
    },
    {
      "type": "Microsoft.Devices/IotHubs",
      "apiVersion": "2021-07-02",
      "name": "[variables('IoTHubName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('IoTHubSKU')]",
        "capacity": "[parameters('IoTHubUnits')]"
      },
      "properties": {
        "ipFilterRules": [],
        "eventHubEndpoints": {
          "events": {
            "retentionTimeInDays": 1,
            "partitionCount": 4
          }
        },
        "routing": {
          "endpoints": {
            "serviceBusQueues": [],
            "serviceBusTopics": [],
            "eventHubs": [
              {
                "connectionString": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', split(format('{0}/iothubdata/iothubroutes_prototypeDev-hub', variables('eventHubNSName')), '/')[0], split(format('{0}/iothubdata/iothubroutes_prototypeDev-hub', variables('eventHubNSName')), '/')[1], split(format('{0}/iothubdata/iothubroutes_prototypeDev-hub', variables('eventHubNSName')), '/')[2]), '2021-11-01').primaryConnectionString]",
                "authenticationType": "keyBased",
                "name": "EventHubRouteEndPoint"
              }
            ],
            "storageContainers": []
          },
          "enrichments": [],
          "routes": [
            {
              "name": "telemetrytoEH",
              "source": "DeviceMessages",
              "condition": "true",
              "endpointNames": [
                "EventHubRouteEndPoint"
              ],
              "isEnabled": true
            }
          ],
          "fallbackRoute": {
            "name": "$fallback",
            "source": "DeviceMessages",
            "condition": "true",
            "endpointNames": [
              "events"
            ],
            "isEnabled": true
          }
        },
        "storageEndpoints": {
          "$default": {
            "sasTtlAsIso8601": "PT1H",
            "connectionString": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id)), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id))), '2021-08-01').keys[0].value)]",
            "containerName": "initialuploads",
            "authenticationType": "keyBased"
          }
        },
        "messagingEndpoints": {
          "fileNotifications": {
            "lockDurationAsIso8601": "PT1M",
            "ttlAsIso8601": "PT1H",
            "maxDeliveryCount": 10
          }
        },
        "enableFileUploadNotifications": true,
        "cloudToDevice": {
          "maxDeliveryCount": 10,
          "defaultTtlAsIso8601": "PT1H",
          "feedback": {
            "lockDurationAsIso8601": "PT1M",
            "ttlAsIso8601": "PT1H",
            "maxDeliveryCount": 10
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', split(format('{0}/iothubdata/iothubroutes_prototypeDev-hub', variables('eventHubNSName')), '/')[0], split(format('{0}/iothubdata/iothubroutes_prototypeDev-hub', variables('eventHubNSName')), '/')[1], split(format('{0}/iothubdata/iothubroutes_prototypeDev-hub', variables('eventHubNSName')), '/')[2])]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id)))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces",
      "apiVersion": "2021-11-01",
      "name": "[variables('eventHubNSName')]",
      "sku": {
        "name": "[variables('eventHubSKUName')]",
        "tier": "[variables('eventHubSKUTier')]",
        "capacity": "[variables('eventHubSKUCapactity')]"
      },
      "location": "[parameters('location')]",
      "properties": {
        "disableLocalAuth": false,
        "zoneRedundant": true,
        "isAutoInflateEnabled": false,
        "maximumThroughputUnits": 0,
        "kafkaEnabled": true
      }
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2021-11-01",
      "name": "[variables('eventHubIOTName')]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 4,
        "status": "Active"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNSName'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2021-11-01",
      "name": "[variables('eventHubTelemName')]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 4,
        "status": "Active"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNSName'))]"
      ]
    },
    {
      "type": "Microsoft.TimeSeriesInsights/environments/eventSources",
      "apiVersion": "2020-05-15",
      "name": "[variables('eventSourceName')]",
      "kind": "Microsoft.EventHub",
      "location": "[parameters('location')]",
      "properties": {
        "sharedAccessKey": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', split(format('{0}/telemetrydata/TSI', variables('eventHubNSName')), '/')[0], split(format('{0}/telemetrydata/TSI', variables('eventHubNSName')), '/')[1], split(format('{0}/telemetrydata/TSI', variables('eventHubNSName')), '/')[2]), '2021-11-01').primaryKey]",
        "eventSourceResourceId": "[variables('eventHubTelemName')]",
        "eventHubName": "[variables('eventHubName')]",
        "consumerGroupName": "[variables('TSIConsumerGroupName')]",
        "keyName": "TSI",
        "serviceBusNamespace": "[variables('eventHubNSName')]",
        "timestampPropertyName": "body.gatewayData.vqts.t"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNSName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', split(variables('eventHubTelemName'), '/')[0], split(variables('eventHubTelemName'), '/')[1])]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', split(format('{0}/telemetrydata/TSI', variables('eventHubNSName')), '/')[0], split(format('{0}/telemetrydata/TSI', variables('eventHubNSName')), '/')[1], split(format('{0}/telemetrydata/TSI', variables('eventHubNSName')), '/')[2])]",
        "[resourceId('Microsoft.TimeSeriesInsights/environments', format('{0}TSI', parameters('ResourcePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.TimeSeriesInsights/environments",
      "apiVersion": "2020-05-15",
      "name": "[format('{0}TSI', parameters('ResourcePrefix'))]",
      "sku": {
        "name": "L1",
        "capacity": 1
      },
      "kind": "Gen2",
      "location": "[parameters('location')]",
      "tags": {},
      "properties": {
        "storageConfiguration": {
          "accountName": "[format('{0}', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id)))]",
          "managementKey": "[format('{0}', listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id))), '2021-08-01').keys[0].value)]"
        },
        "timeSeriesIdProperties": [
          {
            "name": "[variables('timeSeriesIdPropertiesKey1')]",
            "type": "String"
          },
          {
            "name": "[variables('timeSeriesIdPropertiesKey2')]",
            "type": "String"
          }
        ],
        "warmStoreConfiguration": {
          "dataRetention": "[format('P{0}D', parameters('WarmStorageDuration'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id)))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-03-01",
      "name": "[variables('serverFarmName')]",
      "kind": "linux",
      "location": "[parameters('location')]",
      "properties": {
        "perSiteScaling": false,
        "maximumElasticWorkerCount": 20,
        "elasticScaleEnabled": true,
        "targetWorkerSizeId": 0,
        "targetWorkerCount": 0,
        "reserved": true
      },
      "sku": {
        "name": "EP1",
        "tier": "ElasticPremium",
        "size": "EP1",
        "family": "EP",
        "capacity": 1
      }
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}/iothubdata/iothubroutes_prototypeDev-hub', variables('eventHubNSName'))]",
      "properties": {
        "rights": [
          "Send"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNSName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', split(variables('eventHubIOTName'), '/')[0], split(variables('eventHubIOTName'), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}/iothubdata/IoTMessageParser', variables('eventHubNSName'))]",
      "properties": {
        "rights": [
          "Listen"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNSName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', split(variables('eventHubIOTName'), '/')[0], split(variables('eventHubIOTName'), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}/telemetrydata/IoTMessageParser', variables('eventHubNSName'))]",
      "properties": {
        "rights": [
          "Send"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNSName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', split(variables('eventHubTelemName'), '/')[0], split(variables('eventHubTelemName'), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}/telemetrydata/TSI', variables('eventHubNSName'))]",
      "properties": {
        "rights": [
          "Listen"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNSName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', split(variables('eventHubTelemName'), '/')[0], split(variables('eventHubTelemName'), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}/telemetrydata/TwinUpdateService', variables('eventHubNSName'))]",
      "properties": {
        "rights": [
          "Listen"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNSName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', split(variables('eventHubTelemName'), '/')[0], split(variables('eventHubTelemName'), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}/$Default', variables('eventHubTelemName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNSName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', split(variables('eventHubTelemName'), '/')[0], split(variables('eventHubTelemName'), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}/iotmessageparser', variables('eventHubIOTName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNSName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', split(variables('eventHubIOTName'), '/')[0], split(variables('eventHubIOTName'), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}/tsieventhub', variables('eventHubTelemName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNSName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', split(variables('eventHubTelemName'), '/')[0], split(variables('eventHubTelemName'), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}ITDBlobParser', parameters('ResourcePrefix'))]",
      "kind": "functionapp,linux,container",
      "location": "[parameters('location')]",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[format('{0}itdblobparser.azurewebsites.net', parameters('ResourcePrefix'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[format('{0}itdblobparser.scm.azurewebsites.net', parameters('ResourcePrefix'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('serverFarmName'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "siteConfig": {
          "numberOfWorkers": 1,
          "linuxFxVersion": "DOCKER|eidevcontainers.azurecr.io/itdazurefuncblobparser:20220306171150",
          "acrUseManagedIdentityCreds": false,
          "alwaysOn": false,
          "http20Enabled": false,
          "functionAppScaleLimit": 0,
          "minimumElasticInstanceCount": 1
        },
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "clientCertMode": "Required",
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": false,
        "redundancyMode": "None",
        "storageAccountRequired": false,
        "keyVaultReferenceIdentity": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('serverFarmName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[format('{0}/{1}', format('{0}ITDBlobParser', parameters('ResourcePrefix')), 'appsettings')]",
      "kind": "string",
      "properties": {
        "AzureWebJobsStorage": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id)), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id))), '2021-08-01').keys[0].value)]",
        "DeleteOnProcessComplete": "true",
        "DiagnosticServices_EXTENSION_VERSION": "~3",
        "EventHubCon": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', split(format('{0}/iothubdata/IoTMessageParser', variables('eventHubNSName')), '/')[0], split(format('{0}/iothubdata/IoTMessageParser', variables('eventHubNSName')), '/')[1], split(format('{0}/iothubdata/IoTMessageParser', variables('eventHubNSName')), '/')[2]), '2021-11-01').primaryConnectionString]",
        "FUNCTIONS_EXTENSION_VERSION": "~3",
        "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id)), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id))), '2021-08-01').keys[0].value)]",
        "WEBSITE_CONTENTSHARE": "itdblobparser97e3",
        "WEBSITES_ENABLE_APP_SERVICE_STORAGE": "false",
        "DOCKER_CUSTOM_IMAGE_NAME": "eidevcontainers.azurecr.io/itdazurefuncblobparser:20220306171150",
        "DOCKER_REGISTRY_RESOURCE_ID": "[variables('dockerRegistryResource_id')]",
        "DOCKER_REGISTRY_SERVER_PASSWORD": "[variables('dockerRegistryServerPassword')]",
        "DOCKER_REGISTRY_SERVER_URL": "[variables('dockerRegistryServerURL')]",
        "DOCKER_REGISTRY_SERVER_USERNAME": "[variables('dockerRegistryServerUserName')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', split(format('{0}/iothubdata/IoTMessageParser', variables('eventHubNSName')), '/')[0], split(format('{0}/iothubdata/IoTMessageParser', variables('eventHubNSName')), '/')[1], split(format('{0}/iothubdata/IoTMessageParser', variables('eventHubNSName')), '/')[2])]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id)))]",
        "[resourceId('Microsoft.Web/sites', format('{0}ITDBlobParser', parameters('ResourcePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}ITDIOTParser', parameters('ResourcePrefix'))]",
      "kind": "functionapp,linux,container",
      "location": "[parameters('location')]",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[format('{0}itdiotparser.azurewebsites.net', parameters('ResourcePrefix'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[format('{0}itdiotparser.scm.azurewebsites.net', parameters('ResourcePrefix'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('serverFarmName'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "siteConfig": {
          "numberOfWorkers": 1,
          "linuxFxVersion": "DOCKER|eidevcontainers.azurecr.io/itdazurefuncsiotmessageparser:20220323140400",
          "acrUseManagedIdentityCreds": false,
          "alwaysOn": false,
          "http20Enabled": false,
          "functionAppScaleLimit": 0,
          "minimumElasticInstanceCount": 1
        },
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "clientCertMode": "Required",
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": false,
        "redundancyMode": "None",
        "storageAccountRequired": false,
        "keyVaultReferenceIdentity": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('serverFarmName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[format('{0}/{1}', format('{0}ITDIOTParser', parameters('ResourcePrefix')), 'appsettings')]",
      "kind": "string",
      "properties": {
        "AzureWebJobsStorage": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id)), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id))), '2021-08-01').keys[0].value)]",
        "DeleteOnProcessComplete": "true",
        "DiagnosticServices_EXTENSION_VERSION": "~3",
        "EventHubCon": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', split(format('{0}/iothubdata/IoTMessageParser', variables('eventHubNSName')), '/')[0], split(format('{0}/iothubdata/IoTMessageParser', variables('eventHubNSName')), '/')[1], split(format('{0}/iothubdata/IoTMessageParser', variables('eventHubNSName')), '/')[2]), '2021-11-01').primaryConnectionString]",
        "EventHubOut": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', split(format('{0}/telemetrydata/IoTMessageParser', variables('eventHubNSName')), '/')[0], split(format('{0}/telemetrydata/IoTMessageParser', variables('eventHubNSName')), '/')[1], split(format('{0}/telemetrydata/IoTMessageParser', variables('eventHubNSName')), '/')[2]), '2021-11-01').primaryConnectionString]",
        "FUNCTIONS_EXTENSION_VERSION": "~3",
        "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id)), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id))), '2021-08-01').keys[0].value)]",
        "WEBSITE_CONTENTSHARE": "itdiotparserb794",
        "WEBSITES_ENABLE_APP_SERVICE_STORAGE": "false",
        "DOCKER_CUSTOM_IMAGE_NAME": "eidevcontainers.azurecr.io/itdazurefuncsiotmessageparser:20220323140400",
        "DOCKER_REGISTRY_RESOURCE_ID": "[variables('dockerRegistryResource_id')]",
        "DOCKER_REGISTRY_SERVER_PASSWORD": "[variables('dockerRegistryServerPassword')]",
        "DOCKER_REGISTRY_SERVER_URL": "[variables('dockerRegistryServerURL')]",
        "DOCKER_REGISTRY_SERVER_USERNAME": "[variables('dockerRegistryServerUserName')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', split(format('{0}/iothubdata/IoTMessageParser', variables('eventHubNSName')), '/')[0], split(format('{0}/iothubdata/IoTMessageParser', variables('eventHubNSName')), '/')[1], split(format('{0}/iothubdata/IoTMessageParser', variables('eventHubNSName')), '/')[2])]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id)))]",
        "[resourceId('Microsoft.Web/sites', format('{0}ITDIOTParser', parameters('ResourcePrefix')))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', split(format('{0}/telemetrydata/IoTMessageParser', variables('eventHubNSName')), '/')[0], split(format('{0}/telemetrydata/IoTMessageParser', variables('eventHubNSName')), '/')[1], split(format('{0}/telemetrydata/IoTMessageParser', variables('eventHubNSName')), '/')[2])]"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}ITDTwinParser', parameters('ResourcePrefix'))]",
      "kind": "functionapp,linux,container",
      "location": "[parameters('location')]",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[format('{0}itdtwinparser.azurewebsites.net', parameters('ResourcePrefix'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[format('{0}itdtwinparser.scm.azurewebsites.net', parameters('ResourcePrefix'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('serverFarmName'))]",
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "siteConfig": {
          "numberOfWorkers": 1,
          "linuxFxVersion": "DOCKER|eidevcontainers.azurecr.io/itdazurefuncsiotmessageparser:20220323140400",
          "acrUseManagedIdentityCreds": false,
          "alwaysOn": false,
          "http20Enabled": false,
          "functionAppScaleLimit": 0,
          "minimumElasticInstanceCount": 1
        },
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "clientCertMode": "Required",
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": false,
        "redundancyMode": "None",
        "storageAccountRequired": false,
        "keyVaultReferenceIdentity": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('serverFarmName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[format('{0}/{1}', format('{0}ITDTwinParser', parameters('ResourcePrefix')), 'appsettings')]",
      "kind": "string",
      "properties": {
        "AzureWebJobsStorage": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id)), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id))), '2021-08-01').keys[0].value)]",
        "DeleteOnProcessComplete": "true",
        "DiagnosticServices_EXTENSION_VERSION": "~3",
        "adtinstanceUrl": "[format('https://{0}.api.eus.digitaltwins.azure.net', format('{0}ADT', parameters('ResourcePrefix')))]",
        "TwinUpdateServiceEventHub": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', split(format('{0}/telemetrydata/TwinUpdateService', variables('eventHubNSName')), '/')[0], split(format('{0}/telemetrydata/TwinUpdateService', variables('eventHubNSName')), '/')[1], split(format('{0}/telemetrydata/TwinUpdateService', variables('eventHubNSName')), '/')[2]), '2021-11-01').primaryConnectionString]",
        "FUNCTIONS_EXTENSION_VERSION": "~3",
        "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id)), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id))), '2021-08-01').keys[0].value)]",
        "WEBSITE_CONTENTSHARE": "itdiotparserb794",
        "WEBSITES_ENABLE_APP_SERVICE_STORAGE": "false",
        "DOCKER_CUSTOM_IMAGE_NAME": "eidevcontainers.azurecr.io/itdazurefuncstwinparsersvc:20220310200003",
        "DOCKER_REGISTRY_RESOURCE_ID": "[variables('dockerRegistryResource_id')]",
        "DOCKER_REGISTRY_SERVER_PASSWORD": "[variables('dockerRegistryServerPassword')]",
        "DOCKER_REGISTRY_SERVER_URL": "[variables('dockerRegistryServerURL')]",
        "DOCKER_REGISTRY_SERVER_USERNAME": "[variables('dockerRegistryServerUserName')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', format('{0}ADT', parameters('ResourcePrefix')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}storage', parameters('ResourcePrefix'), uniqueString(resourceGroup().id)))]",
        "[resourceId('Microsoft.Web/sites', format('{0}ITDTwinParser', parameters('ResourcePrefix')))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', split(format('{0}/telemetrydata/TwinUpdateService', variables('eventHubNSName')), '/')[0], split(format('{0}/telemetrydata/TwinUpdateService', variables('eventHubNSName')), '/')[1], split(format('{0}/telemetrydata/TwinUpdateService', variables('eventHubNSName')), '/')[2])]"
      ]
    },
    {
      "type": "Microsoft.DigitalTwins/digitalTwinsInstances",
      "apiVersion": "2021-06-30-preview",
      "name": "[format('{0}ADT', parameters('ResourcePrefix'))]",
      "location": "[parameters('location')]",
      "properties": {
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[format('{0}AppInsights', parameters('ResourcePrefix'))]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "RetentionInDays": 90,
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      },
      "metadata": {
        "description": "Generated from /subscriptions/4753dce4-4462-4424-9529-c4653adadf81/resourceGroups/EIDev-Protos/providers/microsoft.insights/components/ITDFuncs"
      }
    }
  ]
}